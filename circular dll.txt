// menu driven program for circular doubbly link list//

#include <stdio.h>
#include<stdlib.h>

struct node
{
    int data;
    struct node* next;
    struct node* prev;
};
struct node* head=NULL,*ptr;

void create()
{
    struct node* temp;
    temp=(struct node*)malloc(sizeof(struct node));
    printf("Enter node data:");
    scanf("%d",&temp->data);
    temp->next=NULL;
    temp->prev=NULL;
    if(head==NULL)
    {
        head=temp;
        ptr=temp;
        head->next=head;
        head->prev=head;
    }
    else
    {
        ptr->next=temp;
        ptr->prev=ptr;
        temp->next=head;
        ptr=ptr->next;
    }
}

void insert_begin(int value)
{
    struct node* temp;
    temp=(struct node*)malloc(sizeof(struct node));
    temp->data=value;
    temp->next=NULL;
    temp->prev=NULL;
    if(head==NULL)
    {
        head=temp;
    }
    else
    {
        temp->next=head;
        head->prev=temp;
        temp->prev=ptr;
        ptr->next=temp;
        head=temp;
    }
}
void insert_end(int value)
{
    struct node* temp;
    temp=(struct node*)malloc(sizeof(struct node));
    temp->data=value;
    temp->next=NULL;
    temp->prev=NULL;
    if(head==NULL)
    {
        head=temp;
    }
    else
    {
        ptr=head;
        while(ptr->next!=head)
        {
            ptr=ptr->next;
        }
        ptr->next=temp;
        temp->prev=ptr;
        temp->next=head;
        head->prev=temp;
    }
}

void insert_after_specified_ele(int value,int ele)
{
    struct node* temp;
    temp=(struct node*)malloc(sizeof(struct node));
    temp->data=value;
    temp->next=NULL;
    temp->prev=NULL;
    if(head==NULL)
    {
        head=temp;
    }
    else
    {
        ptr=head;
        while(ptr->data!=ele)
        {
            ptr=ptr->next;
        }
        temp->next=ptr->next;
        temp->prev=ptr;
        ptr->next=temp;
        temp->next->prev=temp;
    }
}

void delete_begin()
{
    if(head==NULL)
    {
        printf("list is empty");
    }
    else
    {
        struct node* temp;
        temp=head;
        ptr=head->prev;
        head=head->next;
        head->prev=ptr;
        ptr->next=head;
        free(temp);
        temp=NULL;
    }
}

void delete_end()
{
    if(head==NULL)
    {
        printf("list is empty");
    }
    else
    {
        ptr=head;
         while(ptr->next!=head)
        {
         
            ptr=ptr->next;
        }
        ptr->prev->next=head;
        head->prev=ptr->prev;
        free(ptr);
     
    }
}

void delete_middle(int ele)
{
    if(head==NULL)
    {
        printf("list is empty");
    }
    else
    {
        ptr=head;
        while(ptr->data!=ele)
        {
            ptr=ptr->next;
        }
        ptr->prev->next=ptr->next;
        ptr->next->prev=ptr->prev;
        free(ptr);
        ptr=NULL;
    }
}

void display()
{
    
    if(head==NULL)
    {
       printf("list is empty");
    }
    else
    {
        ptr=head;
        while(ptr->next!=head)
        {
            printf("%d<=>",ptr->data);
            ptr=ptr->next;
        }
        printf("%d<=>\n",ptr->data);
    }
}

int main()
{
   int ch,value,ele;
   printf("1.create\n2.Display\n3.insert_begin\n4.insert_end\n5.insert after_specified_ele\n6.delete_begin\n7.delete_end\n8.delete_middle\n9.exit\n");
   
   while(1)
   {
       printf("enter your choice:");
       scanf("%d",&ch);
       switch(ch)
       {
           case 1:
           {
               create();
               break;
           }
           case 2:
           {
               display();
               break;
           }
           case 3:
           {
               printf("Enter the value:");
               scanf("%d",&value);
               insert_begin(value);
               break;
           }
           case 4:
           {
               printf("Enter the value:");
               scanf("%d",&value);
               insert_end(value);
               break;
           }
           case 5:
           {
               printf("Enter the value:");
               scanf("%d",&value);
               printf("Enter the position:");
               scanf("%d",&ele);
               insert_after_specified_ele(value,ele);
               break;
           }
           case 6:
           {
               delete_begin();
               break;
           }
           case 7:
           {
               delete_end();
               break;
           }
           case 8:
           {
               printf("Enter the element you want to delete:");
               scanf("%d",&ele);
               delete_middle(ele);
               break;
           }
           case 9:
           exit(0);
       }
    }
}


